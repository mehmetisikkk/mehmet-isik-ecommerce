{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap, delay, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BooksService = /*#__PURE__*/(() => {\n  class BooksService {\n    constructor(http) {\n      this.http = http;\n      this.url_firebase = \"https://angular-bh-default-rtdb.firebaseio.com/\";\n    }\n\n    getBooks(genrebookId) {\n      let newurl = this.url_firebase + \"books.json\";\n\n      if (genrebookId) {\n        newurl += '?genrebookId=' + genrebookId;\n      }\n\n      return this.http.get(newurl).pipe(map(response => {\n        const movies = [];\n\n        for (let key in response) {\n          if (genrebookId) {\n            if (genrebookId == response[key].genreId) {\n              movies.push({ ...response[key],\n                id: key\n              });\n            }\n          } // if(publisherId)\n          // {\n          //   if(publisherId==response[key].publisherId)\n          //   {\n          //     movies.push({...response[key],id:key});\n          //   }\n          // }\n          // if(authorId)\n          // {\n          //   if(authorId==response[key].authorId)\n          //   {\n          //     movies.push({...response[key],id:key});\n          //   }\n          // }\n          // if(languageId)\n          // {\n          //   if(languageId==response[key].languageId)\n          //   {\n          //     movies.push({...response[key],id:key});\n          //   }\n          // }\n          // if(yearId)\n          // {\n          //   if(yearId==response[key].yearId)\n          //   {\n          //     movies.push({...response[key],id:key});\n          //   }\n          // }\n          else {\n            movies.push({ ...response[key],\n              id: key\n            });\n          }\n        }\n\n        return movies;\n      }), tap(data => console.log(data)), catchError(this.HandleError), delay(1000));\n    }\n\n    getBookById(bookId) {\n      return this.http.get(this.url_firebase + \"books/\" + bookId + \".json\").pipe(tap(data => console.log(data)), catchError(this.HandleError), delay(1000));\n    }\n\n    postBook(book) {\n      const httpOption = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Token'\n        })\n      };\n      return this.http.post(this.url_firebase + \"books.json\", book, httpOption).pipe(tap(data => console.log(data)), catchError(this.HandleError), delay(1000));\n    }\n\n    putBook(item) {\n      const httpOption = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Token'\n        })\n      };\n      return this.http.put(this.url_firebase + \"books/\" + item.id + \".json\", item, httpOption).pipe(tap(data => console.log(data)), catchError(this.HandleError), delay(1000));\n    }\n\n    deleteBook(item) {\n      const httpOption = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Token'\n        })\n      };\n      return this.http.delete(this.url_firebase + \"books/\" + item.id + \".json\", item).pipe(tap(data => console.log(data)), catchError(this.HandleError), delay(1000));\n    }\n\n    addtoMyList(item) {\n      return this.http.post(this.url_firebase + \"/users/\" + item.userId + \"/list/\" + item.bookId + \".json\", {\n        dateAdded: new Date().getTime()\n      }).pipe(tap(data => console.log(data)), catchError(this.HandleError));\n    }\n\n    removetoMyList(item) {\n      return this.http.delete(this.url_firebase + \"/users/\" + item.userId + \"/list/\" + item.bookId + \".json\").pipe(tap(data => console.log(data)), catchError(this.HandleError));\n    }\n\n    getMyList(userId) {\n      return this.http.get(this.url_firebase + \"/users/\" + userId + \"/list.json\").pipe(map(response => {\n        const books = [];\n\n        for (const key in response) {\n          books.push(key);\n        }\n\n        return books;\n      }), tap(data => console.log(data)), catchError(this.HandleError));\n    }\n\n    uploadSignature(vals) {\n      let data = vals;\n      return this.http.post('https://api.cloudinary.com/v1_1/sociala/upload', data);\n    }\n\n    HandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.log(\"Error: \" + error.error.message);\n      } else {\n        switch (error.status) {\n          case 404:\n            console.log(\"404 Error: \\n\" + error.message);\n            break;\n\n          case 403:\n            console.log(\"403 Error: \\n\" + error.message);\n            break;\n\n          case 500:\n            console.log(\"500 Error: \\n\" + error.message);\n            break;\n\n          default:\n            console.log(\"Some unknow Error: \\n\" + error.message);\n        }\n      }\n\n      return throwError(() => new Error(\"from HandleError: \" + error.message));\n    }\n\n  }\n\n  BooksService.ɵfac = function BooksService_Factory(t) {\n    return new (t || BooksService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BooksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BooksService,\n    factory: BooksService.ɵfac,\n    providedIn: 'root'\n  });\n  return BooksService;\n})();","map":null,"metadata":{},"sourceType":"module"}