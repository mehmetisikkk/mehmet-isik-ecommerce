{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap, throwError, delay } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CommentService = /*#__PURE__*/(() => {\n  class CommentService {\n    constructor(http) {\n      this.http = http;\n      this.url_firebase = \"https://angular-bh-default-rtdb.firebaseio.com/\";\n    }\n\n    postComment(comment) {\n      const httpOption = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Token'\n        })\n      };\n      return this.http.post(this.url_firebase + \"comment.json\", comment, httpOption).pipe(tap(data => console.log(data)), catchError(this.HandleError), delay(1000));\n    }\n\n    getComment() {\n      return this.http.get(this.url_firebase + \"comment.json\").pipe(map(response => {\n        const comments = [];\n\n        for (const key in response) {\n          comments.push({ ...response[key],\n            id: key\n          });\n        }\n\n        return comments;\n      }));\n    }\n\n    HandleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.log(\"Error: \" + error.error.message);\n      } else {\n        switch (error.status) {\n          case 404:\n            console.log(\"404 Error: \\n\" + error.message);\n            break;\n\n          case 403:\n            console.log(\"403 Error: \\n\" + error.message);\n            break;\n\n          case 500:\n            console.log(\"500 Error: \\n\" + error.message);\n            break;\n\n          default:\n            console.log(\"Some unknow Error: \\n\" + error.message);\n        }\n      }\n\n      return throwError(() => new Error(\"from HandleError: \" + error.message));\n    }\n\n  }\n\n  CommentService.ɵfac = function CommentService_Factory(t) {\n    return new (t || CommentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CommentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommentService,\n    factory: CommentService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommentService;\n})();","map":null,"metadata":{},"sourceType":"module"}