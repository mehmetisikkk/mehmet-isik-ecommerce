{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { User } from '../Models/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n      this.key = \"AIzaSyBXsxF1DlNkV93WeHa5PnbJ3rsbMd6wzUU\";\n      this.SingUpUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\";\n      this.SingInUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\";\n      this.user = new BehaviorSubject(null);\n    }\n\n    singUp(email, password) {\n      return this.http.post(this.SingUpUrl + this.key, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(response => {\n        const expirationDate = new Date(new Date().getTime() + Number(response.expiresIn) * 1000);\n        const user = new User(response.email, response.localId, response.idToken, expirationDate);\n        this.user.next(user);\n        localStorage.setItem(\"user\", JSON.stringify(user)); //  this.handleAuthentication(response.email,response.localId,response.idToken,+response.expiresIn)\n      }));\n    }\n\n    logIn(email, password) {\n      return this.http.post(this.SingInUrl + this.key, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(response => {\n        const expirationDate = new Date(new Date().getTime() + Number(response.expiresIn) * 1000);\n        const user = new User(response.email, response.localId, response.idToken, expirationDate);\n        this.user.next(user);\n        localStorage.setItem(\"user\", JSON.stringify(user)); //    this.handleAuthentication(response.email,response.localId,response.idToken,+response.expiresIn)\n      }));\n    }\n\n    logout() {\n      this.user.next(null);\n      localStorage.setItem(\"user\", JSON.stringify(null));\n      localStorage.removeItem(\"user\");\n    }\n\n    autoLogin() {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n\n      if (!user) {\n        return;\n      }\n\n      const loadedUser = new User(user.email, user.id, user._token, new Date(user._tokenExpiration));\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n      }\n    }\n\n    handleAuthentication(email, userId, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + Number() * 1000);\n      const user = new User(email, userId, token, expirationDate);\n      this.user.next(user);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}